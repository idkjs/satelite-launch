// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_format from "bs-platform/lib/es6/caml_format.js";

function first(__x) {
  return Belt_Array.get(__x, 0);
}

function second(__x) {
  return Belt_Array.get(__x, 1);
}

function split(separator, text) {
  return text.trim().split(separator);
}

function splitByColon(param) {
  return param.trim().split(":");
}

function toString(number) {
  return String(number);
}

function mod60(number) {
  return number % 60;
}

function compose(func1, func2, value) {
  return Curry._1(func1, Curry._1(func2, value));
}

function getMinute(param) {
  var __x = param.trim().split(":");
  return Belt_Array.get(__x, 1);
}

function getHour(param) {
  var __x = param.trim().split(":");
  return Belt_Array.get(__x, 0);
}

function isSingleDigit(numberText) {
  return Caml_format.caml_int_of_string(numberText) < 10;
}

function addPrefixDigit(numberText) {
  if (Caml_format.caml_int_of_string(numberText) < 10) {
    return "0" + numberText;
  } else {
    return numberText;
  }
}

function nextMinuteNumber(number) {
  return (number - 1 | 0) % 60;
}

function nextMinute(number) {
  var value = (number - 1 | 0) % 60;
  return addPrefixDigit(String(value));
}

function getNewTime(hours, minutes) {
  switch (minutes) {
    case "00" :
        return /* tuple */[
                nextMinute(Caml_format.caml_int_of_string(hours)),
                "59"
              ];
    case "59" :
        return /* tuple */[
                hours,
                nextMinute(Caml_format.caml_int_of_string(minutes))
              ];
    default:
      return /* tuple */[
              hours,
              nextMinute(Caml_format.caml_int_of_string(minutes))
            ];
  }
}

function calculateNewTime(startTime) {
  var __x = startTime.trim().split(":");
  var hour = Belt_Option.getExn(Belt_Array.get(__x, 0));
  var __x$1 = startTime.trim().split(":");
  var minute = Belt_Option.getExn(Belt_Array.get(__x$1, 1));
  var getNewTime$1 = getNewTime(hour, minute);
  var newTime = getNewTime$1[0] + (":" + getNewTime$1[1]);
  console.log("newTime", newTime);
  return newTime;
}

export {
  first ,
  second ,
  split ,
  splitByColon ,
  toString ,
  mod60 ,
  compose ,
  getMinute ,
  getHour ,
  isSingleDigit ,
  addPrefixDigit ,
  nextMinuteNumber ,
  nextMinute ,
  getNewTime ,
  calculateNewTime ,
  
}
/* No side effect */
